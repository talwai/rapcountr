'\" t
.\"     Title: pgbench
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 2013-04-01
.\"    Manual: PostgreSQL 9.2.4 Documentation
.\"    Source: PostgreSQL 9.2.4
.\"  Language: English
.\"
.TH "PGBENCH" "1" "2013-04-01" "PostgreSQL 9.2.4" "PostgreSQL 9.2.4 Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pgbench \- run a benchmark test on PostgreSQL
.\" pgbench
.SH "SYNOPSIS"
.HP \w'\fBpgbench\fR\ 'u
\fBpgbench\fR \fB\-i\fR [\fIoption\fR...] [\fIdbname\fR]
.HP \w'\fBpgbench\fR\ 'u
\fBpgbench\fR [\fIoption\fR...] [\fIdbname\fR]
.SH "DESCRIPTION"
.PP

pgbench
is a simple program for running benchmark tests on
PostgreSQL\&. It runs the same sequence of SQL commands over and over, possibly in multiple concurrent database sessions, and then calculates the average transaction rate (transactions per second)\&. By default,
pgbench
tests a scenario that is loosely based on TPC\-B, involving five
\fBSELECT\fR,
\fBUPDATE\fR, and
\fBINSERT\fR
commands per transaction\&. However, it is easy to test other cases by writing your own transaction script files\&.
.PP
Typical output from pgbench looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
transaction type: TPC\-B (sort of)
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 85\&.184871 (including connections establishing)
tps = 85\&.296346 (excluding connections establishing)
.fi
.if n \{\
.RE
.\}
.sp
The first six lines report some of the most important parameter settings\&. The next line reports the number of transactions completed and intended (the latter being just the product of number of clients and number of transactions per client); these will be equal unless the run failed before completion\&. (In
\fB\-T\fR
mode, only the actual number of transactions is printed\&.) The last two lines report the number of transactions per second, figured with and without counting the time to start database sessions\&.
.PP
The default TPC\-B\-like transaction test requires specific tables to be set up beforehand\&.
pgbench
should be invoked with the
\fB\-i\fR
(initialize) option to create and populate these tables\&. (When you are testing a custom script, you don\*(Aqt need this step, but will instead need to do whatever setup your test needs\&.) Initialization looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
pgbench \-i [ \fIother\-options\fR ] \fIdbname\fR
.fi
.if n \{\
.RE
.\}
.sp
where
\fIdbname\fR
is the name of the already\-created database to test in\&. (You may also need
\fB\-h\fR,
\fB\-p\fR, and/or
\fB\-U\fR
options to specify how to connect to the database server\&.)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCaution\fR
.ps -1
.br
.PP

pgbench \-i
creates four tables
pgbench_accounts,
pgbench_branches,
pgbench_history, and
pgbench_tellers, destroying any existing tables of these names\&. Be very careful to use another database if you have tables having these names!
.sp .5v
.RE
.PP
At the default
\(lqscale factor\(rq
of 1, the tables initially contain this many rows:
.sp
.if n \{\
.RS 4
.\}
.nf
table                   # of rows
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
.fi
.if n \{\
.RE
.\}
.sp
You can (and, for most purposes, probably should) increase the number of rows by using the
\fB\-s\fR
(scale factor) option\&. The
\fB\-F\fR
(fillfactor) option might also be used at this point\&.
.PP
Once you have done the necessary setup, you can run your benchmark with a command that doesn\*(Aqt include
\fB\-i\fR, that is
.sp
.if n \{\
.RS 4
.\}
.nf
pgbench [ \fIoptions\fR ] \fIdbname\fR
.fi
.if n \{\
.RE
.\}
.sp
In nearly all cases, you\*(Aqll need some options to make a useful test\&. The most important options are
\fB\-c\fR
(number of clients),
\fB\-t\fR
(number of transactions),
\fB\-T\fR
(time limit), and
\fB\-f\fR
(specify a custom script file)\&. See below for a full list\&.
.SH "OPTIONS"
.PP
The following is divided into three subsections: Different options are used during database initialization and while running benchmarks, some options are useful in both cases\&.
.SS "Initialization Options"
.PP

pgbench
accepts the following command\-line initialization arguments:
.PP
\fB\-i\fR
.RS 4
Required to invoke initialization mode\&.
.RE
.PP
\fB\-F\fR \fIfillfactor\fR
.RS 4
Create the
pgbench_accounts,
pgbench_tellers
and
pgbench_branches
tables with the given fillfactor\&. Default is 100\&.
.RE
.PP
\fB\-s\fR \fIscale_factor\fR
.RS 4
Multiply the number of rows generated by the scale factor\&. For example,
\-s 100
will create 10,000,000 rows in the
pgbench_accounts
table\&. Default is 1\&.
.RE
.PP
\fB\-\-index\-tablespace=\fR\fB\fIindex_tablespace\fR\fR
.RS 4
Create indexes in the specified tablespace, rather than the default tablespace\&.
.RE
.PP
\fB\-\-tablespace=\fR\fB\fItablespace\fR\fR
.RS 4
Create tables in the specified tablespace, rather than the default tablespace\&.
.RE
.PP
\fB\-\-unlogged\-tables\fR
.RS 4
Create all tables as unlogged tables, rather than permanent tables\&.
.RE
.SS "Benchmarking Options"
.PP

pgbench
accepts the following command\-line benchmarking arguments:
.PP
\fB\-c\fR \fIclients\fR
.RS 4
Number of clients simulated, that is, number of concurrent database sessions\&. Default is 1\&.
.RE
.PP
\fB\-C\fR
.RS 4
Establish a new connection for each transaction, rather than doing it just once per client session\&. This is useful to measure the connection overhead\&.
.RE
.PP
\fB\-d\fR
.RS 4
Print debugging output\&.
.RE
.PP
\fB\-D\fR \fIvarname\fR=\fIvalue\fR
.RS 4
Define a variable for use by a custom script (see below)\&. Multiple
\fB\-D\fR
options are allowed\&.
.RE
.PP
\fB\-f\fR \fIfilename\fR
.RS 4
Read transaction script from
\fIfilename\fR\&. See below for details\&.
\fB\-N\fR,
\fB\-S\fR, and
\fB\-f\fR
are mutually exclusive\&.
.RE
.PP
\fB\-j\fR \fIthreads\fR
.RS 4
Number of worker threads within
pgbench\&. Using more than one thread can be helpful on multi\-CPU machines\&. The number of clients must be a multiple of the number of threads, since each thread is given the same number of client sessions to manage\&. Default is 1\&.
.RE
.PP
\fB\-l\fR
.RS 4
Write the time taken by each transaction to a log file\&. See below for details\&.
.RE
.PP
\fB\-M\fR \fIquerymode\fR
.RS 4
Protocol to use for submitting queries to the server:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
simple: use simple query protocol\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
extended: use extended query protocol\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
prepared: use extended query protocol with prepared statements\&.
.RE
.sp
The default is simple query protocol\&. (See
Chapter 46, Frontend/Backend Protocol, in the documentation
for more information\&.)
.RE
.PP
\fB\-n\fR
.RS 4
Perform no vacuuming before running the test\&. This option is
\fInecessary\fR
if you are running a custom test scenario that does not include the standard tables
pgbench_accounts,
pgbench_branches,
pgbench_history, and
pgbench_tellers\&.
.RE
.PP
\fB\-N\fR
.RS 4
Do not update
pgbench_tellers
and
pgbench_branches\&. This will avoid update contention on these tables, but it makes the test case even less like TPC\-B\&.
.RE
.PP
\fB\-r\fR
.RS 4
Report the average per\-statement latency (execution time from the perspective of the client) of each command after the benchmark finishes\&. See below for details\&.
.RE
.PP
\fB\-s\fR \fIscale_factor\fR
.RS 4
Report the specified scale factor in
pgbench\*(Aqs output\&. With the built\-in tests, this is not necessary; the correct scale factor will be detected by counting the number of rows in the
pgbench_branches
table\&. However, when testing custom benchmarks (\fB\-f\fR
option), the scale factor will be reported as 1 unless this option is used\&.
.RE
.PP
\fB\-S\fR
.RS 4
Perform select\-only transactions instead of TPC\-B\-like test\&.
.RE
.PP
\fB\-t\fR \fItransactions\fR
.RS 4
Number of transactions each client runs\&. Default is 10\&.
.RE
.PP
\fB\-T\fR \fIseconds\fR
.RS 4
Run the test for this many seconds, rather than a fixed number of transactions per client\&.
\fB\-t\fR
and
\fB\-T\fR
are mutually exclusive\&.
.RE
.PP
\fB\-v\fR
.RS 4
Vacuum all four standard tables before running the test\&. With neither
\fB\-n\fR
nor
\fB\-v\fR, pgbench will vacuum the
pgbench_tellers
and
pgbench_branches
tables, and will truncate
pgbench_history\&.
.RE
.SS "Common Options"
.PP

pgbench
accepts the following command\-line common arguments:
.PP
\fB\-h\fR \fIhostname\fR
.RS 4
The database server\*(Aqs host name
.RE
.PP
\fB\-p\fR \fIport\fR
.RS 4
The database server\*(Aqs port number
.RE
.PP
\fB\-U\fR \fIlogin\fR
.RS 4
The user name to connect as
.RE
.PP
\fB\-V\fR, \fB\-\-version\fR
.RS 4
Print the
pgbench
version and exit\&.
.RE
.PP
\fB\-?\fR, \fB\-\-help\fR
.RS 4
Show help about
pgbench
command line arguments, and exit\&.
.RE
.SH "NOTES"
.SS "What is the \(lqTransaction\(rq Actually Performed in pgbench?"
.PP
The default transaction script issues seven commands per transaction:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
BEGIN;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
END;
.RE
.PP
If you specify
\fB\-N\fR, steps 4 and 5 aren\*(Aqt included in the transaction\&. If you specify
\fB\-S\fR, only the
\fBSELECT\fR
is issued\&.
.SS "Custom Scripts"
.PP

pgbench
has support for running custom benchmark scenarios by replacing the default transaction script (described above) with a transaction script read from a file (\fB\-f\fR
option)\&. In this case a
\(lqtransaction\(rq
counts as one execution of a script file\&. You can even specify multiple scripts (multiple
\fB\-f\fR
options), in which case a random one of the scripts is chosen each time a client session starts a new transaction\&.
.PP
The format of a script file is one SQL command per line; multiline SQL commands are not supported\&. Empty lines and lines beginning with
\-\-
are ignored\&. Script file lines can also be
\(lqmeta commands\(rq, which are interpreted by
pgbench
itself, as described below\&.
.PP
There is a simple variable\-substitution facility for script files\&. Variables can be set by the command\-line
\fB\-D\fR
option, explained above, or by the meta commands explained below\&. In addition to any variables preset by
\fB\-D\fR
command\-line options, the variable
scale
is preset to the current scale factor\&. Once set, a variable\*(Aqs value can be inserted into a SQL command by writing
:\fIvariablename\fR\&. When running more than one client session, each session has its own set of variables\&.
.PP
Script file meta commands begin with a backslash (\e)\&. Arguments to a meta command are separated by white space\&. These meta commands are supported:
.PP
\eset \fIvarname\fR \fIoperand1\fR [ \fIoperator\fR \fIoperand2\fR ]
.RS 4
Sets variable
\fIvarname\fR
to a calculated integer value\&. Each
\fIoperand\fR
is either an integer constant or a
:\fIvariablename\fR
reference to a variable having an integer value\&. The
\fIoperator\fR
can be
+,
\-,
*, or
/\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\eset ntellers 10 * :scale
.fi
.if n \{\
.RE
.\}
.RE
.PP
\esetrandom \fIvarname\fR \fImin\fR \fImax\fR
.RS 4
Sets variable
\fIvarname\fR
to a random integer value between the limits
\fImin\fR
and
\fImax\fR
inclusive\&. Each limit can be either an integer constant or a
:\fIvariablename\fR
reference to a variable having an integer value\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\esetrandom aid 1 :naccounts
.fi
.if n \{\
.RE
.\}
.RE
.PP
\esleep \fInumber\fR [ us | ms | s ]
.RS 4
Causes script execution to sleep for the specified duration in microseconds (us), milliseconds (ms) or seconds (s)\&. If the unit is omitted then seconds are the default\&.
\fInumber\fR
can be either an integer constant or a
:\fIvariablename\fR
reference to a variable having an integer value\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\esleep 10 ms
.fi
.if n \{\
.RE
.\}
.RE
.PP
\esetshell \fIvarname\fR \fIcommand\fR [ \fIargument\fR \&.\&.\&. ]
.RS 4
Sets variable
\fIvarname\fR
to the result of the shell command
\fIcommand\fR\&. The command must return an integer value through its standard output\&.
.sp

\fIargument\fR
can be either a text constant or a
:\fIvariablename\fR
reference to a variable of any types\&. If you want to use
\fIargument\fR
starting with colons, you need to add an additional colon at the beginning of
\fIargument\fR\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\esetshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
.fi
.if n \{\
.RE
.\}
.RE
.PP
\eshell \fIcommand\fR [ \fIargument\fR \&.\&.\&. ]
.RS 4
Same as
\esetshell, but the result is ignored\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\eshell command literal_argument :variable ::literal_starting_with_colon
.fi
.if n \{\
.RE
.\}
.RE
.PP
As an example, the full definition of the built\-in TPC\-B\-like transaction is:
.sp
.if n \{\
.RS 4
.\}
.nf
\eset nbranches :scale
\eset ntellers 10 * :scale
\eset naccounts 100000 * :scale
\esetrandom aid 1 :naccounts
\esetrandom bid 1 :nbranches
\esetrandom tid 1 :ntellers
\esetrandom delta \-5000 5000
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
.fi
.if n \{\
.RE
.\}
.sp
This script allows each iteration of the transaction to reference different, randomly\-chosen rows\&. (This example also shows why it\*(Aqs important for each client session to have its own variables \(em otherwise they\*(Aqd not be independently touching different rows\&.)
.SS "Per\-Transaction Logging"
.PP
With the
\fB\-l\fR
option,
pgbench
writes the time taken by each transaction to a log file\&. The log file will be named
pgbench_log\&.\fInnn\fR, where
\fInnn\fR
is the PID of the pgbench process\&. If the
\fB\-j\fR
option is 2 or higher, creating multiple worker threads, each will have its own log file\&. The first worker will use the same name for its log file as in the standard single worker case\&. The additional log files for the other workers will be named
pgbench_log\&.\fInnn\fR\&.\fImmm\fR, where
\fImmm\fR
is a sequential number for each worker starting with 1\&.
.PP
The format of the log is:
.sp
.if n \{\
.RS 4
.\}
.nf
\fIclient_id\fR \fItransaction_no\fR \fItime\fR \fIfile_no\fR \fItime_epoch\fR \fItime_us\fR
.fi
.if n \{\
.RE
.\}
.sp

where
\fItime\fR
is the total elapsed transaction time in microseconds,
\fIfile_no\fR
identifies which script file was used (useful when multiple scripts were specified with
\fB\-f\fR), and
\fItime_epoch\fR/\fItime_us\fR
are a UNIX epoch format timestamp and an offset in microseconds (suitable for creating a ISO 8601 timestamp with fractional seconds) showing when the transaction completed\&.
.PP
Here are example outputs:
.sp
.if n \{\
.RS 4
.\}
.nf
 0 199 2241 0 1175850568 995598
 0 200 2465 0 1175850568 998079
 0 201 2513 0 1175850569 608
 0 202 2038 0 1175850569 2663
.fi
.if n \{\
.RE
.\}
.SS "Per\-Statement Latencies"
.PP
With the
\fB\-r\fR
option,
pgbench
collects the elapsed transaction time of each statement executed by every client\&. It then reports an average of those values, referred to as the latency for each statement, after the benchmark has finished\&.
.PP
For the default script, the output will look similar to this:
.sp
.if n \{\
.RS 4
.\}
.nf
starting vacuum\&.\&.\&.end\&.
transaction type: TPC\-B (sort of)
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 618\&.764555 (including connections establishing)
tps = 622\&.977698 (excluding connections establishing)
statement latencies in milliseconds:
        0\&.004386        \eset nbranches 1 * :scale
        0\&.001343        \eset ntellers 10 * :scale
        0\&.001212        \eset naccounts 100000 * :scale
        0\&.001310        \esetrandom aid 1 :naccounts
        0\&.001073        \esetrandom bid 1 :nbranches
        0\&.001005        \esetrandom tid 1 :ntellers
        0\&.001078        \esetrandom delta \-5000 5000
        0\&.326152        BEGIN;
        0\&.603376        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
        0\&.454643        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
        5\&.528491        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
        7\&.335435        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
        0\&.371851        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
        1\&.212976        END;
.fi
.if n \{\
.RE
.\}
.PP
If multiple script files are specified, the averages are reported separately for each script file\&.
.PP
Note that collecting the additional timing information needed for per\-statement latency computation adds some overhead\&. This will slow average execution speed and lower the computed TPS\&. The amount of slowdown varies significantly depending on platform and hardware\&. Comparing average TPS values with and without latency reporting enabled is a good way to measure if the timing overhead is significant\&.
.SS "Good Practices"
.PP
It is very easy to use
pgbench
to produce completely meaningless numbers\&. Here are some guidelines to help you get useful results\&.
.PP
In the first place,
\fInever\fR
believe any test that runs for only a few seconds\&. Use the
\fB\-t\fR
or
\fB\-T\fR
option to make the run last at least a few minutes, so as to average out noise\&. In some cases you could need hours to get numbers that are reproducible\&. It\*(Aqs a good idea to try the test run a few times, to find out if your numbers are reproducible or not\&.
.PP
For the default TPC\-B\-like test scenario, the initialization scale factor (\fB\-s\fR) should be at least as large as the largest number of clients you intend to test (\fB\-c\fR); else you\*(Aqll mostly be measuring update contention\&. There are only
\fB\-s\fR
rows in the
pgbench_branches
table, and every transaction wants to update one of them, so
\fB\-c\fR
values in excess of
\fB\-s\fR
will undoubtedly result in lots of transactions blocked waiting for other transactions\&.
.PP
The default test scenario is also quite sensitive to how long it\*(Aqs been since the tables were initialized: accumulation of dead rows and dead space in the tables changes the results\&. To understand the results you must keep track of the total number of updates and when vacuuming happens\&. If autovacuum is enabled it can result in unpredictable changes in measured performance\&.
.PP
A limitation of
pgbench
is that it can itself become the bottleneck when trying to test a large number of client sessions\&. This can be alleviated by running
pgbench
on a different machine from the database server, although low network latency will be essential\&. It might even be useful to run several
pgbench
instances concurrently, on several client machines, against the same database server\&.
