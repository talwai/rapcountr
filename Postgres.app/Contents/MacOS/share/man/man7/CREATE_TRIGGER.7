'\" t
.\"     Title: CREATE TRIGGER
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 2013-04-01
.\"    Manual: PostgreSQL 9.2.4 Documentation
.\"    Source: PostgreSQL 9.2.4
.\"  Language: English
.\"
.TH "CREATE TRIGGER" "7" "2013-04-01" "PostgreSQL 9.2.4" "PostgreSQL 9.2.4 Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
CREATE_TRIGGER \- define a new trigger
.\" CREATE TRIGGER
.SH "SYNOPSIS"
.sp
.nf
CREATE [ CONSTRAINT ] TRIGGER \fIname\fR { BEFORE | AFTER | INSTEAD OF } { \fIevent\fR [ OR \&.\&.\&. ] }
    ON \fItable_name\fR
    [ FROM \fIreferenced_table_name\fR ]
    { NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } }
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( \fIcondition\fR ) ]
    EXECUTE PROCEDURE \fIfunction_name\fR ( \fIarguments\fR )

where \fIevent\fR can be one of:

    INSERT
    UPDATE [ OF \fIcolumn_name\fR [, \&.\&.\&. ] ]
    DELETE
    TRUNCATE
.fi
.SH "DESCRIPTION"
.PP

\fBCREATE TRIGGER\fR
creates a new trigger\&. The trigger will be associated with the specified table or view and will execute the specified function
\fIfunction_name\fR
when certain events occur\&.
.PP
The trigger can be specified to fire before the operation is attempted on a row (before constraints are checked and the
\fBINSERT\fR,
\fBUPDATE\fR, or
\fBDELETE\fR
is attempted); or after the operation has completed (after constraints are checked and the
\fBINSERT\fR,
\fBUPDATE\fR, or
\fBDELETE\fR
has completed); or instead of the operation (in the case of inserts, updates or deletes on a view)\&. If the trigger fires before or instead of the event, the trigger can skip the operation for the current row, or change the row being inserted (for
\fBINSERT\fR
and
\fBUPDATE\fR
operations only)\&. If the trigger fires after the event, all changes, including the effects of other triggers, are
\(lqvisible\(rq
to the trigger\&.
.PP
A trigger that is marked
FOR EACH ROW
is called once for every row that the operation modifies\&. For example, a
\fBDELETE\fR
that affects 10 rows will cause any
ON DELETE
triggers on the target relation to be called 10 separate times, once for each deleted row\&. In contrast, a trigger that is marked
FOR EACH STATEMENT
only executes once for any given operation, regardless of how many rows it modifies (in particular, an operation that modifies zero rows will still result in the execution of any applicable
FOR EACH STATEMENT
triggers)\&.
.PP
Triggers that are specified to fire
INSTEAD OF
the trigger event must be marked
FOR EACH ROW, and can only be defined on views\&.
BEFORE
and
AFTER
triggers on a view must be marked as
FOR EACH STATEMENT\&.
.PP
In addition, triggers may be defined to fire for
\fBTRUNCATE\fR, though only
FOR EACH STATEMENT\&.
.PP
The following table summarizes which types of triggers may be used on tables and views:
.TS
allbox tab(:);
lB lB lB lB.
T{
When
T}:T{
Event
T}:T{
Row\-level
T}:T{
Statement\-level
T}
.T&
c c c c
^ c c c
c c c c
^ c c c
c c c c
^ c c c.
T{
BEFORE
T}:T{
\fBINSERT\fR/\fBUPDATE\fR/\fBDELETE\fR
T}:T{
Tables
T}:T{
Tables and views
T}
:T{
\fBTRUNCATE\fR
T}:T{
\(em
T}:T{
Tables
T}
T{
AFTER
T}:T{
\fBINSERT\fR/\fBUPDATE\fR/\fBDELETE\fR
T}:T{
Tables
T}:T{
Tables and views
T}
:T{
\fBTRUNCATE\fR
T}:T{
\(em
T}:T{
Tables
T}
T{
INSTEAD OF
T}:T{
\fBINSERT\fR/\fBUPDATE\fR/\fBDELETE\fR
T}:T{
Views
T}:T{
\(em
T}
:T{
\fBTRUNCATE\fR
T}:T{
\(em
T}:T{
\(em
T}
.TE
.sp 1
.PP
Also, a trigger definition can specify a Boolean
WHEN
condition, which will be tested to see whether the trigger should be fired\&. In row\-level triggers the
WHEN
condition can examine the old and/or new values of columns of the row\&. Statement\-level triggers can also have
WHEN
conditions, although the feature is not so useful for them since the condition cannot refer to any values in the table\&.
.PP
If multiple triggers of the same kind are defined for the same event, they will be fired in alphabetical order by name\&.
.PP
When the
CONSTRAINT
option is specified, this command creates a
constraint trigger\&. This is the same as a regular trigger except that the timing of the trigger firing can be adjusted using
SET CONSTRAINTS (\fBSET_CONSTRAINTS\fR(7))\&. Constraint triggers must be
AFTER ROW
triggers\&. They can be fired either at the end of the statement causing the triggering event, or at the end of the containing transaction; in the latter case they are said to be
deferred\&. A pending deferred\-trigger firing can also be forced to happen immediately by using
\fBSET CONSTRAINTS\fR\&. Constraint triggers are expected to raise an exception when the constraints they implement are violated\&.
.PP

\fBSELECT\fR
does not modify any rows so you cannot create
\fBSELECT\fR
triggers\&. Rules and views are more appropriate in such cases\&.
.PP
Refer to
Chapter 36, Triggers, in the documentation
for more information about triggers\&.
.SH "PARAMETERS"
.PP
\fIname\fR
.RS 4
The name to give the new trigger\&. This must be distinct from the name of any other trigger for the same table\&. The name cannot be schema\-qualified \(em the trigger inherits the schema of its table\&. For a constraint trigger, this is also the name to use when modifying the trigger\*(Aqs behavior using
\fBSET CONSTRAINTS\fR\&.
.RE
.PP
BEFORE, AFTER, INSTEAD OF
.RS 4
Determines whether the function is called before, after, or instead of the event\&. A constraint trigger can only be specified as
AFTER\&.
.RE
.PP
\fIevent\fR
.RS 4
One of
INSERT,
UPDATE,
DELETE, or
TRUNCATE; this specifies the event that will fire the trigger\&. Multiple events can be specified using
OR\&.
.sp
For
UPDATE
events, it is possible to specify a list of columns using this syntax:
.sp
.if n \{\
.RS 4
.\}
.nf
UPDATE OF \fIcolumn_name1\fR [, \fIcolumn_name2\fR \&.\&.\&. ]
.fi
.if n \{\
.RE
.\}
.sp

The trigger will only fire if at least one of the listed columns is mentioned as a target of the
\fBUPDATE\fR
command\&.
.sp
INSTEAD OF UPDATE
events do not support lists of columns\&.
.RE
.PP
\fItable_name\fR
.RS 4
The name (optionally schema\-qualified) of the table or view the trigger is for\&.
.RE
.PP
\fIreferenced_table_name\fR
.RS 4
The (possibly schema\-qualified) name of another table referenced by the constraint\&. This option is used for foreign\-key constraints and is not recommended for general use\&. This can only be specified for constraint triggers\&.
.RE
.PP
DEFERRABLE, NOT DEFERRABLE, INITIALLY IMMEDIATE, INITIALLY DEFERRED
.RS 4
The default timing of the trigger\&. See the
CREATE TABLE (\fBCREATE_TABLE\fR(7))
documentation for details of these constraint options\&. This can only be specified for constraint triggers\&.
.RE
.PP
FOR EACH ROW, FOR EACH STATEMENT
.RS 4
This specifies whether the trigger procedure should be fired once for every row affected by the trigger event, or just once per SQL statement\&. If neither is specified,
FOR EACH STATEMENT
is the default\&. Constraint triggers can only be specified
FOR EACH ROW\&.
.RE
.PP
\fIcondition\fR
.RS 4
A Boolean expression that determines whether the trigger function will actually be executed\&. If
WHEN
is specified, the function will only be called if the
\fIcondition\fR
returns
true\&. In
FOR EACH ROW
triggers, the
WHEN
condition can refer to columns of the old and/or new row values by writing
OLD\&.\fIcolumn_name\fR
or
NEW\&.\fIcolumn_name\fR
respectively\&. Of course,
INSERT
triggers cannot refer to
OLD
and
DELETE
triggers cannot refer to
NEW\&.
.sp
INSTEAD OF
triggers do not support
WHEN
conditions\&.
.sp
Currently,
WHEN
expressions cannot contain subqueries\&.
.sp
Note that for constraint triggers, evaluation of the
WHEN
condition is not deferred, but occurs immediately after the row update operation is performed\&. If the condition does not evaluate to true then the trigger is not queued for deferred execution\&.
.RE
.PP
\fIfunction_name\fR
.RS 4
A user\-supplied function that is declared as taking no arguments and returning type
trigger, which is executed when the trigger fires\&.
.RE
.PP
\fIarguments\fR
.RS 4
An optional comma\-separated list of arguments to be provided to the function when the trigger is executed\&. The arguments are literal string constants\&. Simple names and numeric constants can be written here, too, but they will all be converted to strings\&. Please check the description of the implementation language of the trigger function to find out how these arguments can be accessed within the function; it might be different from normal function arguments\&.
.RE
.SH "NOTES"
.PP
To create a trigger on a table, the user must have the
TRIGGER
privilege on the table\&. The user must also have
EXECUTE
privilege on the trigger function\&.
.PP
Use
DROP TRIGGER (\fBDROP_TRIGGER\fR(7))
to remove a trigger\&.
.PP
A column\-specific trigger (one defined using the
UPDATE OF \fIcolumn_name\fR
syntax) will fire when any of its columns are listed as targets in the
\fBUPDATE\fR
command\*(Aqs
SET
list\&. It is possible for a column\*(Aqs value to change even when the trigger is not fired, because changes made to the row\*(Aqs contents by
BEFORE UPDATE
triggers are not considered\&. Conversely, a command such as
UPDATE \&.\&.\&. SET x = x \&.\&.\&.
will fire a trigger on column
x, even though the column\*(Aqs value did not change\&.
.PP
In a
BEFORE
trigger, the
WHEN
condition is evaluated just before the function is or would be executed, so using
WHEN
is not materially different from testing the same condition at the beginning of the trigger function\&. Note in particular that the
NEW
row seen by the condition is the current value, as possibly modified by earlier triggers\&. Also, a
BEFORE
trigger\*(Aqs
WHEN
condition is not allowed to examine the system columns of the
NEW
row (such as
oid), because those won\*(Aqt have been set yet\&.
.PP
In an
AFTER
trigger, the
WHEN
condition is evaluated just after the row update occurs, and it determines whether an event is queued to fire the trigger at the end of statement\&. So when an
AFTER
trigger\*(Aqs
WHEN
condition does not return true, it is not necessary to queue an event nor to re\-fetch the row at end of statement\&. This can result in significant speedups in statements that modify many rows, if the trigger only needs to be fired for a few of the rows\&.
.PP
In
PostgreSQL
versions before 7\&.3, it was necessary to declare trigger functions as returning the placeholder type
opaque, rather than
trigger\&. To support loading of old dump files,
\fBCREATE TRIGGER\fR
will accept a function declared as returning
opaque, but it will issue a notice and change the function\*(Aqs declared return type to
trigger\&.
.SH "EXAMPLES"
.PP
Execute the function
\fBcheck_account_update\fR
whenever a row of the table
accounts
is about to be updated:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
.fi
.if n \{\
.RE
.\}
.sp
The same, but only execute the function if column
balance
is specified as a target in the
\fBUPDATE\fR
command:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
.fi
.if n \{\
.RE
.\}
.sp
This form only executes the function if column
balance
has in fact changed value:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD\&.balance IS DISTINCT FROM NEW\&.balance)
    EXECUTE PROCEDURE check_account_update();
.fi
.if n \{\
.RE
.\}
.sp
Call a function to log updates of
accounts, but only if something changed:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD\&.* IS DISTINCT FROM NEW\&.*)
    EXECUTE PROCEDURE log_account_update();
.fi
.if n \{\
.RE
.\}
.sp
Execute the function
\fBview_insert_row\fR
for each row to insert rows into the tables underlying a view:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE PROCEDURE view_insert_row();
.fi
.if n \{\
.RE
.\}
.PP

Section 36.4, \(lqA Complete Trigger Example\(rq, in the documentation
contains a complete example of a trigger function written in C\&.
.SH "COMPATIBILITY"
.PP
The
\fBCREATE TRIGGER\fR
statement in
PostgreSQL
implements a subset of the
SQL
standard\&. The following functionality is currently missing:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SQL allows you to define aliases for the
\(lqold\(rq
and
\(lqnew\(rq
rows or tables for use in the definition of the triggered action (e\&.g\&.,
CREATE TRIGGER \&.\&.\&. ON tablename REFERENCING OLD ROW AS somename NEW ROW AS othername \&.\&.\&.)\&. Since
PostgreSQL
allows trigger procedures to be written in any number of user\-defined languages, access to the data is handled in a language\-specific way\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
PostgreSQL
only allows the execution of a user\-defined function for the triggered action\&. The standard allows the execution of a number of other SQL commands, such as
\fBCREATE TABLE\fR, as the triggered action\&. This limitation is not hard to work around by creating a user\-defined function that executes the desired commands\&.
.RE
.PP
SQL specifies that multiple triggers should be fired in time\-of\-creation order\&.
PostgreSQL
uses name order, which was judged to be more convenient\&.
.PP
SQL specifies that
BEFORE DELETE
triggers on cascaded deletes fire
\fIafter\fR
the cascaded
DELETE
completes\&. The
PostgreSQL
behavior is for
BEFORE DELETE
to always fire before the delete action, even a cascading one\&. This is considered more consistent\&. There is also nonstandard behavior if
BEFORE
triggers modify rows or prevent updates during an update that is caused by a referential action\&. This can lead to constraint violations or stored data that does not honor the referential constraint\&.
.PP
The ability to specify multiple actions for a single trigger using
OR
is a
PostgreSQL
extension of the SQL standard\&.
.PP
The ability to fire triggers for
\fBTRUNCATE\fR
is a
PostgreSQL
extension of the SQL standard, as is the ability to define statement\-level triggers on views\&.
.PP

\fBCREATE CONSTRAINT TRIGGER\fR
is a
PostgreSQL
extension of the
SQL
standard\&.
.SH "SEE ALSO"
CREATE FUNCTION (\fBCREATE_FUNCTION\fR(7)), ALTER TRIGGER (\fBALTER_TRIGGER\fR(7)), DROP TRIGGER (\fBDROP_TRIGGER\fR(7)), SET CONSTRAINTS (\fBSET_CONSTRAINTS\fR(7))
